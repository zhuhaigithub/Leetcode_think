给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。
给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。

输入："23"
输出：["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].

用队列实现广度优先搜索

1.建立一个map哈希表；
2.新建一个队列；
3.将第一个字符串所对应的码表逐步进入到队列中；
4.出队操作，存储当前出队的string；
5.将此string与后一个字符串所对应的码表中每一个值相加并逐步进入到队列中；
6.最终队列中存储的即为所有情况的string

#include <iostream>
#include <vector>
#include <map>
#include <queue>
using namespace std;
class Solution
{
public:
	vector<string> letterCombinations(string digits)
	{
		int len=digits.size();
		vector<string> result;//储存结果
		if(len==0)
			return result;
		map<char,string> m={{'2',"abc"},{'3',"def"},{'4',"ghi"},{'5',"jkl"},{'6',"mno"},{'7',"pqrs"},{'8',"tuv"},{'9',"wxyz"}};
		queue<string> Q;
		for(int i=0;i<m[digits[0]].size();i++)
		{
			string str;
			str.push_back(m[digits[0]][i]);
			Q.push(str);
		}
		string s;//用来存储队头元素
		for(int i=1;i<len;i++)
		{
			int length=Q.size();//队列当前长度
			while(length--)
			{
				for(int j=0;j<m[digits[i]].size();j++)
				{
					s=Q.front();//得到队头
					s+=m[digits[i]][j];//组合
					Q.push(s);//入队
				}
				Q.pop();//弹出队列的第一个元素，并不会返回元素的值
			}
		}
		while(!Q.empty())
		{
			result.push_back(Q.front());
			Q.pop();
		}
		return result;
	}
};

int main()
{
	vector<string> res;
	Solution a;
	string digit="234";
	res=a.letterCombinations(digit);
	vector<string>::iterator iter;
	for(iter=res.begin();iter!=res.end();iter++)
	{
		cout <<*iter<<'\t';
	}
	cout <<endl;
}
