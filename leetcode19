删除链表的倒数第N个结点(Remove Nth Node From End Of List)

一次遍历实现
时间复杂度O(n)
空间复杂度O(1)

使用双指针：
增加一个虚拟头结点(防止只有一个结点的情况)
1.初始时p，q指针都指向虚拟头结点
2.然后使p指针向后移动N+1次(注意不是N次)，q指针不动
3.然后使p，q指针同时移动(保证p，q指针之间的结点为N个)，直到p指针指向NULL
4.此时q指针所指向的下一个结点就是所求结点

#include <iostream>

using namespace std;
struct ListNode//定义结点，在C++中struct也是类
{
	int data;
	ListNode *next;
	ListNode(int x):data(x),next(NULL) {}
};
class Solution
{
public:
	ListNode* delfromnode(ListNode *head,int n)
	{
		ListNode *Head=new ListNode(0);//创造指向head的虚拟结点
		Head->next=head;

		ListNode *p=Head;
		ListNode *q=Head;

		for(int i=0;i<n+1;i++)//q移动n+1
		{
			q=q->next;
		}
		while(q)//q==NULL
		{
			p=p->next;
			q=q->next;
		}

		ListNode *delnode=p->next;//删除p的下一个结点
		p->next=delnode->next;//连接

		delete delnode;

		ListNode *result=Head->next;
		delete Head;

		return result;//返回头结点
	}
};

void createlist(ListNode *head,int n)
{
	ListNode *p=head;
	for(int i=2;i<=n;i++)
	{
		ListNode *q=new ListNode(i);//新建结点
		p->next=q;//链接 
		p=q;//p向后移动
	}
	
}
int main()
{
	ListNode *head=new ListNode(1);
	createlist(head,5);
	Solution a;
	ListNode *res;
	res=a.delfromnode(head,3);
	while(res)
	{
		cout <<res->data<<'\t';
		res=res->next;
	}
	cout <<endl;
}
