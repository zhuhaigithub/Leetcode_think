Leetcode_32

最长有效括号(Longest Valid Parentheses)

首先可以确定的是：如果有结果，那么结果第一个字符一定是'('

算法步骤：
1.创立一个栈，遍历字符串
2.遇到左括号则入栈
3.遇到右括号
3.1如果当前栈为空，则用start右移一位(因为之前没有左括号，不可能为结果）
3.2如果当前栈不为空，则将栈顶元素弹出（因为栈里存的都是左括号）
3.2.1如果弹出栈顶元素后栈为空，则更新i-start+1的较大值
3.2.2如果不为空，更新i-栈顶元素中的最大值

#include <iostream>
#include <stack>
#include <algorithm>
using namespace std;

class Solution
{
public:
	int longestvalid(string s)
	{
		stack<int> vec;//左括号进栈
		int res;//结果
		int start=0;//一种可能结果的开始下标
		for(int i=0;i<s.length();i++)
		{
			if(s[i]=='(')//左括号进栈
			{
				vec.push(i);
			}
			else if(s[i]==')')
			{
				if(vec.empty())//栈中没有左括号
				{
					start=i+1;
				}
				else//栈中有左括号
				{
					vec.pop();//弹出栈顶
					if(vec.empty())//如果弹出栈顶后栈为空
					{
						res=max(res,i-start+1);//i-start+1是从start到i都是结果
					}
					else//弹出栈顶后栈不为空
					{
						res=max(res,i-vec.top());//不能用start是因为栈不空没有到start位置
					}
				}
			}
		}
		return res;
	}
};
int main()
{
	Solution a;
	int result;
	result=a.longestvalid("())((()))");

	cout <<result<<endl;
}
